name: release-nikki-tproxy

on:
  workflow_dispatch:
  
permissions:
  contents: write
  
jobs:
  build:
    name: ${{ matrix.arch }}-${{ matrix.branch }} build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch:
          - aarch64_generic
        branch:
          - openwrt-24.10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build package
        uses: openwrt/gh-action-sdk@main
        env:
          ARCH: ${{ matrix.arch }}-${{ matrix.branch }}
          FEEDNAME: nikki
          PACKAGES: luci-app-nikki
          NO_REFRESH_CHECK: true

      - name: Extract package versions
        id: extract_versions
        run: |
          set -e
          # Cari ipk luci-app-nikki (frontend)
          FRONTEND_IPK=$(find bin/packages/${{ matrix.arch }}/nikki -name 'luci-app-nikki_*.ipk' | head -n 1)
          if [[ -z "$FRONTEND_IPK" ]]; then
            echo "❌ luci-app-nikki package not found!"
            exit 1
          fi
          FRONTEND_VER=$(basename "$FRONTEND_IPK" | sed -E 's/^luci-app-nikki_([^_]+)_.*\.ipk/\1/')

          # Cari ipk nikki (backend)
          BACKEND_IPK=$(find bin/packages/${{ matrix.arch }}/nikki -name 'nikki_*.ipk' | head -n 1)
          if [[ -z "$BACKEND_IPK" ]]; then
            echo "❌ nikki package not found!"
            exit 1
          fi
          BACKEND_VER=$(basename "$BACKEND_IPK" | sed -E 's/^nikki_([^_]+)_.*\.ipk/\1/')

          # Bersihkan versi backend dari '-Mod-r1' jika ada (optional)
          BACKEND_VER_CLEAN=$(echo "$BACKEND_VER" | sed 's/-Mod-r1//')

          echo "frontend_version=$FRONTEND_VER" >> $GITHUB_OUTPUT
          echo "backend_version=$BACKEND_VER_CLEAN" >> $GITHUB_OUTPUT

      - name: Create release filename and tag
        id: release_meta
        run: |
          FRONTEND="${{ steps.extract_versions.outputs.frontend_version }}"
          BACKEND="${{ steps.extract_versions.outputs.backend_version }}"
          ARCH="${{ matrix.arch }}"
          BRANCH="${{ matrix.branch }}"

          REL_NAME="Nikki-TProxy-${FRONTEND}_${BACKEND}_${ARCH}-${BRANCH}"
          TAG_NAME=$(echo "$REL_NAME" | tr '~ ' '--')

          echo "relname=$REL_NAME" >> $GITHUB_OUTPUT
          echo "tagname=$TAG_NAME" >> $GITHUB_OUTPUT

      - name: Compress .ipk files
        run: |
          mkdir -p output
          cp bin/packages/${{ matrix.arch }}/nikki/*.ipk output/
          zip -j ${{ steps.release_meta.outputs.relname }}.zip output/*.ipk

      - name: Create empty commit and tag
        env:
          GIT_TAG: ${{ steps.release_meta.outputs.tagname }}
          GIT_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

          git fetch origin
          git checkout --orphan temp-release-branch
          git rm -rf .
          git commit --allow-empty -m "Empty commit for release"

          git tag "$GIT_TAG"
          git push "https://${GIT_TOKEN}@github.com/${{ github.repository }}" "$GIT_TAG"

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        with:
          tag_name: ${{ steps.release_meta.outputs.tagname }}
          release_name: ${{ steps.release_meta.outputs.relname }}
          draft: false
          prerelease: false

      - name: Upload ZIP to GitHub Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.release_meta.outputs.relname }}.zip
          asset_name: ${{ steps.release_meta.outputs.relname }}.zip
          asset_content_type: application/zip
